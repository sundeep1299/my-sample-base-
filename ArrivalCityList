

// include necessary header file here
//----
#include <iostream>
#include <iomanip>
#include <string>

#ifndef ARRIVALCITYLIST_H_
#define ARRIVALCITYLIST_H_

using namespace std;

// struct ArrCity represents an arrival city information with
// distance info. from a specific departure city
struct ArrCity
{
    string arrCityName;
    int distance;
    struct ArrCity *next;
};

// class ArrivalCityList is a linked list of ArrCity
class ArrivalCityList
{
private:
    struct ArrCity *head;

public:
    ArrivalCityList();
    ~ArrivalCityList();
    ArrCity *getHead();
    ArrCity *findArrCity(string oneCity);
    bool addArrCity(string oneCity, int distance);
    void printArrCityList();
};

//*************************************************
ArrivalCityList::ArrivalCityList()
{
    head = nullptr;
}

//*************************************************
ArrivalCityList::~ArrivalCityList()
{
    ArrCity *current= head;
    while (current != nullptr)
    {
        ArrCity *next = current->next;
        delete(current);
        current = next;

    }
    head = nullptr;
}

//*************************************************
ArrCity *ArrivalCityList::getHead()
{
        return head;
}

//*************************************************
ArrCity *ArrivalCityList::findArrCity(string oneCity)
{
    // traverse the linked list to find the node
    ArrCity *temp = head;
    while (temp != nullptr)
    {
        if (temp->arrCityName == oneCity)
            return temp;
        temp = temp->next;
    }
    // desired node not found
    return nullptr;
}

//*************************************************
//*************************************************
void ArrivalCityList::printArrCityList()
{
    cout << left;
    cout << setw(15) << "Arr. City"
         << setw(15) << "Distance" << endl;
    struct ArrCity *temp = head;
    if(temp == nullptr) {
        cout << "Arrival city list is empty";
        return;
    }
    while (temp != nullptr)
    {
        cout << setw(15) << temp->arrCityName
             << setw(15) << temp->distance << endl;
        temp = temp->next;
    }
}

bool ArrivalCityList::addArrCity(string oneCity, int distance)
{
    if(findArrCity(oneCity)!=nullptr) {
        return false;
    }
    ArrCity *newCity = new ArrCity;
    newCity->arrCityName = oneCity;
    newCity->distance = distance;
    newCity->next = nullptr;
    //head = newCity;

    // Handle empty list
    if (head == nullptr || oneCity<head->arrCityName)
    {
        newCity->next = head;
        head = newCity;
        //return true;
    }
    else{
        ArrCity* temp=head;
        while(temp->next != nullptr && temp->next->arrCityName < oneCity){
            temp = temp->next;
        }
        newCity->next = temp->next;
        temp->next = newCity;
    }

    // Handle inserting at head
   /* if (oneCity < head->arrCityName)
    {
        newCity->next = head;
        head = newCity;
        return true;
    }

    // Handle inserting after head
    ArrCity *prev = head;
    ArrCity *curr = head->next;
    while (curr != nullptr)
    {
        if (oneCity == curr->arrCityName)
        {
            // City already exists in the list, so don't insert
            delete newCity;
            return false;
        }
        if (oneCity < curr->arrCityName)
        {
            // Insert the new city here
            newCity->next = curr;
            //prev->next = newCity;
            return true;
        }
        prev = curr;
        curr = curr->next;
    }

    // Insert the new city at the end of the list
    prev->next = newCity;*/
    return true;
}
#endif
